# -*- coding: utf-8 -*-
"""
Created on Tue Jul 13 13:31:38 2021

@author: iliaskaloup
"""

from flask import Flask, jsonify, request
from flask_cors import CORS
from waitress import serve
import json
from os import path
import pandas as pd
#from bson import json_util
import sys
from git import Repo
import shutil

import vulnerability_assessment_service

#http://ITI-724.iti.gr:5001

# Create the Flask app
app = Flask(__name__)
# Enable CORS
CORS(app)

@app.route('/Security/VulnerabilityAssessment', methods=['GET'])
#@app.route('/Security/VulnerabilityAssessment', methods=['GET'])
def GetVulnerabilityTable():
    #read arguements
    git_url = request.args.get('project_path')
    language = request.args.get('language')
    
    # check if path is null
    if git_url == '' :
        return "You have to specify project's path."
    
    # check if language is specified
    if language == '' :
        return "You have to specify project's programming language (either java or cpp)."
    elif language != 'cpp' and language != 'java':
        return "Choose a project written in cpp or java programming language."
    
    # clone repo
    splitted = git_url.split("/")
    repo_dir = "testRepo/" + splitted[-2] + '_' + splitted[-1]   
    if (path.exists(repo_dir) == False):    
        Repo.clone_from(git_url, repo_dir)

    # apply VP
    jsonFilePath = vulnerability_assessment_service.getVul(repo_dir, language)
    f = open(jsonFilePath,)
    vp = json.load(f)
    #print(vp, file=sys.stderr)
    #com = json.dumps(vp)
    
    # prepare output message
    message = {
        'status': 200,
        'message': 'The request was fulfilled. ',
        'results': vp,
        }
    resp = jsonify(message)
    resp.status_code = 200
    return resp
    
@app.route("/")
def hello():
    return "Check for vulnerabilities in your software!"

# errorhandler ()
@app.errorhandler(400)
def bad_request(error=None):
    message = {
        'status': 400,
        'message': 'Bad Request: ' + request.url + ' --> Please check your data payload.',
    }
    resp = jsonify(message)
    resp.status_code = 400

    return resp

@app.errorhandler(500)
def internal_server_error(error=None):
    message = {
        'status': 500,
        'message': 'The server encountered an internal error and was unable to complete your request. Missing or invalid parameters. ',
    }
    resp = jsonify(message)
    resp.status_code = 500

    return resp

def main():
    print("\nServing on http://ITI-724.iti.gr:5002")
    #app.run(port = 5000, debug=True)
    serve(app, host='0.0.0.0', port=5002)

if __name__ == '__main__':
    main()
    



