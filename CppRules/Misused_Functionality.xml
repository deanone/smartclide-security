<!--
  Copyright (C) 2021-2022 CERTH
  
  This program and the accompanying materials are made
  available under the terms of the Eclipse Public License 2.0
  which is available at https://www.eclipse.org/legal/epl-2.0/
  
  SPDX-License-Identifier: EPL-2.0
-->
<suppressions>
  <suppress>
    <id>purgedConfiguration</id>
  </suppress>
  <suppress>
    <id>toomanyconfigs</id>
  </suppress>
  <suppress>
    <id>ConfigurationNotChecked</id>
  </suppress>
  <suppress>
    <id>assertWithSideEffect</id>
  </suppress>
  <suppress>
    <id>comparisonOfFuncReturningBoolError</id>
  </suppress>
  <suppress>
    <id>comparisonOfTwoFuncsReturningBoolError</id>
  </suppress>
  <suppress>
    <id>comparisonOfBoolWithBoolError</id>
  </suppress>
  <suppress>
    <id>comparisonError</id>
  </suppress>
  <suppress>
    <id>multiCondition</id>
  </suppress>
  <suppress>
    <id>oppositeInnerCondition</id>
  </suppress>
  <suppress>
    <id>identicalInnerCondition</id>
  </suppress>
  <suppress>
    <id>identicalConditionAfterEarlyExit</id>
  </suppress>
  <suppress>
    <id>moduloAlwaysTrueFalse</id>
  </suppress>
  <suppress>
    <id>clarifyCondition</id>
  </suppress>
  <suppress>
    <id>knownConditionTrueFalse</id>
  </suppress>
  <suppress>
    <id>charBitOp</id>
  </suppress>
  <suppress>
    <id>variableScope</id>
  </suppress>
  <suppress>
    <id>suspiciousCase</id>
  </suppress>
  <suppress>
    <id>pointerLessThanZero</id>
  </suppress>
  <suppress>
    <id>pointerPositive</id>
  </suppress>
  <suppress>
    <id>commaSeparatedReturn</id>
  </suppress>
  <suppress>
    <id>preprocessorErrorDirective</id>
  </suppress>
  <suppress>
    <id>unusedPrivateFunction</id>
  </suppress>
  <suppress>
    <id>unusedScopedObject</id>
  </suppress>
  <suppress>
    <id>unusedLabelSwitch</id>
  </suppress>
  <suppress>
    <id>unusedLabel</id>
  </suppress>
  <suppress>
    <id>deadpointer</id>
  </suppress>
  <suppress>
    <id>unusedFunction</id>
  </suppress>
  <suppress>
    <id>unusedVariable</id>
  </suppress>
  <suppress>
    <id>unusedAllocatedMemory</id>
  </suppress>
  <suppress>
    <id>unreadVariable</id>
  </suppress>
  <suppress>
    <id>unassignedVariable</id>
  </suppress>
  <suppress>
    <id>unusedStructMember</id>
  </suppress>
  <suppress>
    <id>danglingReference</id>
  </suppress>
  <suppress>
    <id>danglingLifetime</id>
  </suppress>
  <suppress>
    <id>returnDanglingLifetime</id>
  </suppress>
  <suppress>
    <id>unreachableCode</id>
  </suppress>
  <suppress>
    <id>shadowFunction</id>
  </suppress>
  <suppress>
    <id>shadowVar</id>
  </suppress>
  <suppress>
    <id>constArgument</id>
  </suppress>
  <suppress>
    <id>redundantCondition</id>
  </suppress>
  <suppress>
    <id>redundantCopyLocalConst</id>
  </suppress>
  <suppress>
    <id>redundantCopy</id>
  </suppress>
  <suppress>
    <id>redundantAssignment</id>
  </suppress>
  <suppress>
    <id>comparisonFunctionIsAlwaysTrueOrFalse</id>
  </suppress>
  <suppress>
    <id>redundantAssignInSwitch</id>
  </suppress>
  <suppress>
    <id>redundantCopyInSwitch</id>
  </suppress>
  <suppress>
    <id>selfAssignment</id>
  </suppress>
  <suppress>
    <id>redundantPointerOp</id>
  </suppress>
  <suppress>
    <id>redundantBitwiseOperationInSwitch</id>
  </suppress>
  <suppress>
    <id>uselessCallsCompare</id>
  </suppress>
  <suppress>
    <id>uselessCallsSwap</id>
  </suppress>
  <suppress>
    <id>uselessCallsEmpty</id>
  </suppress>
  <suppress>
    <id>uselessCallsRemove</id>
  </suppress>
  <suppress>
    <id>redundantIfRemove</id>
  </suppress>
  <suppress>
    <id>uselessAssignmentArg</id>
  </suppress>
  <suppress>
    <id>uselessAssignmentPtrArg</id>
  </suppress>
  <suppress>
    <id>duplicateCondition</id>
  </suppress>
  <suppress>
    <id>duplicateBranch</id>
  </suppress>
  <suppress>
    <id>duplicateExpression</id>
  </suppress>
  <suppress>
    <id>duplicateValueTernary</id>
  </suppress>
  <suppress>
    <id>duplicateExpressionTernary</id>
  </suppress>
  <suppress>
    <id>duplicateBreak</id>
  </suppress>
  <suppress>
    <id>suspiciousSemicolon</id>
  </suppress>
  <suppress>
    <id>coutCerrMisusage</id>
  </suppress>
  <suppress>
    <id>fflushOnInputStream</id>
  </suppress>
  <suppress>
    <id>IOWithoutPositioning</id>
  </suppress>
  <suppress>
    <id>readWriteOnlyFile</id>
  </suppress>
  <suppress>
    <id>writeReadOnlyFile</id>
  </suppress>
  <suppress>
    <id>useClosedFile</id>
  </suppress>
  <suppress>
    <id>seekOnAppendedFile</id>
  </suppress>
  <suppress>
    <id>invalidscanf</id>
  </suppress>
  <suppress>
    <id>wrongPrintfScanfArgNum</id>
  </suppress>
  <suppress>
    <id>invalidScanfArgType_s</id>
  </suppress>
  <suppress>
    <id>invalidScanfArgType_int</id>
  </suppress>
  <suppress>
    <id>invalidScanfArgType_float</id>
  </suppress>
  <suppress>
    <id>invalidPrintfArgType_s</id>
  </suppress>
  <suppress>
    <id>invalidPrintfArgType_n</id>
  </suppress>
  <suppress>
    <id>invalidPrintfArgType_p</id>
  </suppress>
  <suppress>
    <id>invalidPrintfArgType_uint</id>
  </suppress>
  <suppress>
    <id>invalidPrintfArgType_sint</id>
  </suppress>
  <suppress>
    <id>invalidPrintfArgType_float</id>
  </suppress>
  <suppress>
    <id>invalidLengthModifierError</id>
  </suppress>
  <suppress>
    <id>invalidScanfFormatWidth</id>
  </suppress>
  <suppress>
    <id>invalidScanfFormatWidth_smaller</id>
  </suppress>
  <suppress>
    <id>wrongPrintfScanfParameterPositionError</id>
  </suppress>
  <suppress>
    <id>sprintfOverlappingData</id>
  </suppress>
  <suppress>
    <id>insecureCmdLineArgs</id>
  </suppress>
  <suppress>
    <id>strncatUsage</id>
  </suppress>
  <suppress>
    <id>terminateStrncpy</id>
  </suppress>
  <suppress>
    <id>staticStringCompare</id>
  </suppress>
  <suppress>
    <id>stringCompare</id>
  </suppress>
  <suppress>
    <id>overlappingStrcmp</id>
  </suppress>
  <suppress>
    <id>invalidFunctionArgStr</id>
  </suppress>
  <suppress>
    <id>stlBoundaries</id>
  </suppress>
  <suppress>
    <id>stlIfFind</id>
  </suppress>
  <suppress>
    <id>stlIfStrFind</id>
  </suppress>
  <suppress>
    <id>stlcstr</id>
  </suppress>
  <suppress>
    <id>stlcstrReturn</id>
  </suppress>
  <suppress>
    <id>stlcstrParam</id>
  </suppress>
  <suppress>
    <id>stlcstrthrow</id>
  </suppress>
  <suppress>
    <id>uselessCallsSubstr</id>
  </suppress>
  <suppress>
    <id>stringLiteralWrite</id>
  </suppress>
  <suppress>
    <id>strPlusChar</id>
  </suppress>
  <suppress>
    <id>incorrectStringCompare</id>
  </suppress>
  <suppress>
    <id>literalWithCharPtrCompare</id>
  </suppress>
  <suppress>
    <id>charLiteralWithCharPtrCompare</id>
  </suppress>
  <suppress>
    <id>incorrectStringBooleanError</id>
  </suppress>
  <suppress>
    <id>incorrectCharBooleanError</id>
  </suppress>
  <suppress>
    <id>uninitstring</id>
  </suppress>
  <suppress>
    <id>bufferNotZeroTerminated</id>
  </suppress>
  <suppress>
    <id>invalidTestForOverflow</id>
  </suppress>
  <suppress>
    <id>integerOverflow</id>
  </suppress>
  <suppress>
    <id>floatConversionOverflow</id>
  </suppress>
  <suppress>
    <id>argumentSize</id>
  </suppress>
  <suppress>
    <id>arrayIndexOutOfBoundsCond</id>
  </suppress>
  <suppress>
    <id>sizeArgumentAsChar</id>
  </suppress>
  <suppress>
    <id>negativeIndex</id>
  </suppress>
  <suppress>
    <id>negativeMemoryAllocationSize</id>
  </suppress>
  <suppress>
    <id>negativeArraySize</id>
  </suppress>
  <suppress>
    <id>mismatchSize</id>
  </suppress>
  <suppress>
    <id>wrongPipeParameterSize</id>
  </suppress>
  <suppress>
    <id>pointerSize</id>
  </suppress>
  <suppress>
    <id>sizeofDivisionMemfunc</id>
  </suppress>
  <suppress>
    <id>sizeofwithnumericparameter</id>
  </suppress>
  <suppress>
    <id>sizeofsizeof</id>
  </suppress>
  <suppress>
    <id>sizeofCalculation</id>
  </suppress>
  <suppress>
    <id>sizeofFunctionCall</id>
  </suppress>
  <suppress>
    <id>sizeofwithsilentarraypointer</id>
  </suppress>
  <suppress>
    <id>multiplySizeof</id>
  </suppress>
  <suppress>
    <id>divideSizeof</id>
  </suppress>
  <suppress>
    <id>sizeofVoid</id>
  </suppress>
  <suppress>
    <id>sizeofDereferencedVoidPointer</id>
  </suppress>
  <suppress>
    <id>arrayIndexOutOfBounds</id>
  </suppress>
  <suppress>
    <id>bufferAccessOutOfBounds</id>
  </suppress>
  <suppress>
    <id>pointerOutOfBounds</id>
  </suppress>
  <suppress>
    <id>arrayIndexThenCheck</id>
  </suppress>
  <suppress>
    <id>possibleBufferAccessOutOfBounds</id>
  </suppress>
  <suppress>
    <id>outOfBounds</id>
  </suppress>
  <suppress>
    <id>containerOutOfBounds</id>
  </suppress>
  <suppress>
    <id>stlOutOfBounds</id>
  </suppress>
  <suppress>
    <id>incompleteArrayFill</id>
  </suppress>
  <suppress>
    <id>AssignmentAddressToInteger</id>
  </suppress>
  <suppress>
    <id>AssignmentIntegerToAddress</id>
  </suppress>
  <suppress>
    <id>CastIntegerToAddressAtReturn</id>
  </suppress>
  <suppress>
    <id>CastAddressToIntegerAtReturn</id>
  </suppress>
  <suppress>
    <id>assignBoolToPointer</id>
  </suppress>
  <suppress>
    <id>assignBoolToFloat</id>
  </suppress>
  <suppress>
    <id>assignmentInAssert</id>
  </suppress>
  <suppress>
    <id>assignIfError</id>
  </suppress>
  <suppress>
    <id>duplicateAssignExpression</id>
  </suppress>
  <suppress>
    <id>truncLongCastAssignment</id>
    <id>truncLongCastAssignment</id>
  </suppress>
  <suppress>
    <id>invalidPointerCast</id>
  </suppress>
  <suppress>
    <id>checkCastIntToCharAndBack</id>
  </suppress>
  <suppress>
    <id>cstyleCast</id>
  </suppress>
  <suppress>
    <id>truncLongCastReturn</id>
  </suppress>
  <suppress>
    <id>signConversion</id>
  </suppress>
  <suppress>
    <id>signedCharArrayIndex</id>
  </suppress>
  <suppress>
    <id>unknownSignCharArrayIndex</id>
  </suppress>
  <suppress>
    <id>unsignedLessThanZero</id>
  </suppress>
  <suppress>
    <id>unsignedPositive</id>
  </suppress>
  <suppress>
    <id>shiftTooManyBits</id>
  </suppress>
  <suppress>
    <id>shiftTooManyBitsSigned</id>
  </suppress>
  <suppress>
    <id>zerodiv</id>
  </suppress>
  <suppress>
    <id>zerodivcond</id>
  </suppress>
  <suppress>
    <id>shiftNegativeLHS</id>
  </suppress>
  <suppress>
    <id>shiftNegative</id>
  </suppress>
  <suppress>
    <id>uninitdata</id>
  </suppress>
  <suppress>
    <id>uninitvar</id>
  </suppress>
  <suppress>
    <id>uninitStructMember</id>
  </suppress>
  <suppress>
    <id>uninitMemberVar</id>
  </suppress>
  <suppress>
    <id>initializerList</id>
  </suppress>
  <suppress>
    <id>useInitializationList</id>
  </suppress>
  <suppress>
    <id>selfInitialization</id>
  </suppress>
  <suppress>
    <id>incrementboolean</id>
  </suppress>
  <suppress>
    <id>nanInArithmeticExpression</id>
  </suppress>
  <suppress>
    <id>memsetClass</id>
  </suppress>
  <suppress>
    <id>memsetClassReference</id>
  </suppress>
  <suppress>
    <id>memsetClassFloat</id>
  </suppress>
  <suppress>
    <id>unsafeClassDivZero</id>
  </suppress>
  <suppress>
    <id>compareBoolExpressionWithInt</id>
  </suppress>
  <suppress>
    <id>pointerArithBool</id>
  </suppress>
  <suppress>
    <id>comparisonOfBoolWithInvalidComparator</id>
  </suppress>
  <suppress>
    <id>returnNonBoolInBooleanFunction</id>
  </suppress>
  <suppress>
    <id>arithOperationsOnVoidPointer</id>
  </suppress>
  <suppress>
    <id>mismatchingBitAnd</id>
  </suppress>
  <suppress>
    <id>incorrectLogicOperator</id>
  </suppress>
  <suppress>
    <id>AssignmentAddressToInteger</id>
  </suppress>
  <suppress>
    <id>AssignmentIntegerToAddress</id>
  </suppress>
  <suppress>
    <id>CastIntegerToAddressAtReturn</id>
  </suppress>
  <suppress>
    <id>CastAddressToIntegerAtReturn</id>
  </suppress>
  <suppress>
    <id>assignBoolToPointer</id>
  </suppress>
  <suppress>
    <id>assignBoolToFloat</id>
  </suppress>
  <suppress>
    <id>assignmentInAssert</id>
  </suppress>
  <suppress>
    <id>assignIfError</id>
  </suppress>
  <suppress>
    <id>duplicateAssignExpression</id>
  </suppress>
  <suppress>
    <id>truncLongCastAssignment</id>
    <id>truncLongCastAssignment</id>
  </suppress>
  <suppress>
    <id>invalidPointerCast</id>
  </suppress>
  <suppress>
    <id>checkCastIntToCharAndBack</id>
  </suppress>
  <suppress>
    <id>cstyleCast</id>
  </suppress>
  <suppress>
    <id>truncLongCastReturn</id>
  </suppress>
  <suppress>
    <id>signConversion</id>
  </suppress>
  <suppress>
    <id>signedCharArrayIndex</id>
  </suppress>
  <suppress>
    <id>unknownSignCharArrayIndex</id>
  </suppress>
  <suppress>
    <id>unsignedLessThanZero</id>
  </suppress>
  <suppress>
    <id>unsignedPositive</id>
  </suppress>
  <suppress>
    <id>shiftTooManyBits</id>
  </suppress>
  <suppress>
    <id>shiftTooManyBitsSigned</id>
  </suppress>
  <suppress>
    <id>zerodiv</id>
  </suppress>
  <suppress>
    <id>zerodivcond</id>
  </suppress>
  <suppress>
    <id>shiftNegativeLHS</id>
  </suppress>
  <suppress>
    <id>shiftNegative</id>
  </suppress>
  <suppress>
    <id>uninitdata</id>
  </suppress>
  <suppress>
    <id>uninitvar</id>
  </suppress>
  <suppress>
    <id>uninitStructMember</id>
  </suppress>
  <suppress>
    <id>uninitMemberVar</id>
  </suppress>
  <suppress>
    <id>initializerList</id>
  </suppress>
  <suppress>
    <id>useInitializationList</id>
  </suppress>
  <suppress>
    <id>selfInitialization</id>
  </suppress>
  <suppress>
    <id>incrementboolean</id>
  </suppress>
  <suppress>
    <id>nanInArithmeticExpression</id>
  </suppress>
  <suppress>
    <id>memsetClass</id>
  </suppress>
  <suppress>
    <id>memsetClassReference</id>
  </suppress>
  <suppress>
    <id>memsetClassFloat</id>
  </suppress>
  <suppress>
    <id>unsafeClassDivZero</id>
  </suppress>
  <suppress>
    <id>compareBoolExpressionWithInt</id>
  </suppress>
  <suppress>
    <id>pointerArithBool</id>
  </suppress>
  <suppress>
    <id>comparisonOfBoolWithInvalidComparator</id>
  </suppress>
  <suppress>
    <id>returnNonBoolInBooleanFunction</id>
  </suppress>
  <suppress>
    <id>arithOperationsOnVoidPointer</id>
  </suppress>
  <suppress>
    <id>mismatchingBitAnd</id>
  </suppress>
  <suppress>
    <id>incorrectLogicOperator</id>
  </suppress>
  <suppress>
    <id>leakNoVarFunctionCall</id>
  </suppress>
  <suppress>
    <id>leakReturnValNotUsed</id>
  </suppress>
  <suppress>
    <id>leakUnsafeArgAlloc</id>
  </suppress>
  <suppress>
    <id>unsafeClassCanLeak</id>
  </suppress>
  <suppress>
    <id>memleak</id>
  </suppress>
  <suppress>
    <id>resourceLeak</id>
  </suppress>
  <suppress>
    <id>memleakOnRealloc</id>
  </suppress>
  <suppress>
    <id>autoVariables</id>
  </suppress>
  <suppress>
    <id>returnAddressOfAutoVariable</id>
  </suppress>
  <suppress>
    <id>autoVariablesAssignGlobalPointer</id>
  </suppress>
  <suppress>
    <id>autovarInvalidDeallocation</id>
  </suppress>
  <suppress>
    <id>useAutoPointerCopy</id>
  </suppress>
  <suppress>
    <id>useAutoPointerContainer</id>
  </suppress>
  <suppress>
    <id>useAutoPointerArray</id>
  </suppress>
  <suppress>
    <id>useAutoPointerMalloc</id>
  </suppress>
  <suppress>
    <id>doubleFree</id>
  </suppress>
  <suppress>
    <id>deallocret</id>
  </suppress>
  <suppress>
    <id>publicAllocationError</id>
  </suppress>
  <suppress>
    <id>deallocDealloc</id>
  </suppress>
  <suppress>
    <id>deallocuse</id>
  </suppress>
  <suppress>
    <id>mismatchAllocDealloc</id>
  </suppress>
  <suppress>
    <id>mallocOnClassWarning</id>
  </suppress>
  <suppress>
    <id>mallocOnClassError</id>
  </suppress>
  <suppress>
    <id>noConstructor</id>
  </suppress>
  <suppress>
    <id>noExplicitConstructor</id>
  </suppress>
  <suppress>
    <id>copyCtorPointerCopying</id>
  </suppress>
  <suppress>
    <id>noCopyConstructor</id>
  </suppress>
  <suppress>
    <id>noOperatorEq</id>
  </suppress>
  <suppress>
    <id>noDestructor</id>
  </suppress>
  <suppress>
    <id>operatorEqVarError</id>
  </suppress>
  <suppress>
    <id>operatorEq</id>
  </suppress>
  <suppress>
    <id>virtualDestructor</id>
  </suppress>
  <suppress>
    <id>duplInheritedMember</id>
  </suppress>
  <suppress>
    <id>copyCtorAndEqOperator</id>
  </suppress>
  <suppress>
    <id>invalidFree</id>
  </suppress>
  <suppress>
    <id>invalidIterator1</id>
  </suppress>
  <suppress>
    <id>iterators1</id>
  </suppress>
  <suppress>
    <id>iterators2</id>
  </suppress>
  <suppress>
    <id>iterators3</id>
  </suppress>
  <suppress>
    <id>iteratorsCmp1</id>
  </suppress>
  <suppress>
    <id>iteratorsCmp2</id>
  </suppress>
  <suppress>
    <id>mismatchingContainers</id>
  </suppress>
  <suppress>
    <id>mismatchingContainerExpression</id>
  </suppress>
  <suppress>
    <id>sameIteratorExpression</id>
  </suppress>
  <suppress>
    <id>passedByValue</id>
  </suppress>
  <suppress>
    <id>constStatement</id>
  </suppress>
  <suppress>
    <id>invalidIterator2</id>
  </suppress>
  <suppress>
    <id>accessMoved</id>
  </suppress>
  <suppress>
    <id>returnLocalVariable</id>
  </suppress>
  <suppress>
    <id>returnReference</id>
  </suppress>
  <suppress>
    <id>returnTempReference</id>
  </suppress>
  <suppress>
    <id>returnAddressOfFunctionParameter</id>
  </suppress>
  <suppress>
    <id>invalidLifetime</id>
  </suppress>
  <suppress>
    <id>raceAfterInterlockedDecrement</id>
  </suppress>
  <suppress>
    <id>accessForwarded</id>
  </suppress>
  <suppress>
    <id>invalidPointer</id>
  </suppress>
  <suppress>
    <id>exceptThrowInDestructor</id>
  </suppress>
  <suppress>
    <id>exceptDeallocThrow</id>
  </suppress>
  <suppress>
    <id>exceptRethrowCopy</id>
  </suppress>
  <suppress>
    <id>catchExceptionByValue</id>
  </suppress>
  <suppress>
    <id>throwInNoexceptFunction</id>
  </suppress>
  <suppress>
    <id>unhandledExceptionSpecification</id>
  </suppress>
  <suppress>
    <id>boostForeachError</id>
  </suppress>
  <suppress>
    <id>pointerAdditionResultNotNull</id>
  </suppress>
  <suppress>
    <id>nullPointer</id>
  </suppress>
  <suppress>
    <id>nullPointerDefaultArg</id>
  </suppress>
  <suppress>
    <id>nullPointerRedundantCheck</id>
  </suppress>
  <suppress>
    <id>nullPointerArithmetic</id>
  </suppress>
  <suppress>
    <id>nullPointerArithmeticRedundantCheck</id>
  </suppress>
  <suppress>
    <id>varFuncNullUB</id>
  </suppress>
  <suppress>
    <id>eraseDereference</id>
  </suppress>
  <suppress>
    <id>derefInvalidIterator</id>
  </suppress>
</suppressions>